// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and user preferences
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password_hash String    // Hashed password using bcrypt
  name          String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  // User preferences stored as JSONB for flexibility
  preferences   Json?     // { difficulty_level, preferred_terrain, max_distance, etc. }
  
  // Relations
  routes        Route[]
  reviews       Review[]

  @@map("users")
}

// Route model for user-generated trail routes
model Route {
  id             String    @id @default(cuid())
  userId         String
  name           String
  description    String?
  distance       Float     // Distance in kilometers
  duration       Int       // Duration in minutes
  elevation      Float     // Total elevation gain in meters
  difficulty     String    // easy, medium, hard, expert
  terrain_type   String    // paved, unpaved, mixed
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  
  // Geographic data stored as JSONB for flexibility
  // Stores the complete route geometry as GeoJSON LineString
  geometry       Json?     // GeoJSON LineString format
  
  // Relations
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews        Review[]
  waypoints      Waypoint[]
  
  // Indexes for geographic queries
  @@index([userId])
  @@index([terrain_type])
  @@index([difficulty])
  @@index([distance])
  @@index([created_at])
  @@map("routes")
}

// Waypoint model for route waypoints
model Waypoint {
  id        String   @id @default(cuid())
  routeId   String
  name      String?
  latitude  Float
  longitude Float
  order     Int      // Order in the route
  created_at DateTime @default(now())
  
  // Relations
  route     Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
  
  @@index([routeId])
  @@map("waypoints")
}

// Segment model for popular route segments from OpenStreetMap
model Segment {
  id               String    @id @default(cuid())
  osm_id           String    @unique // OpenStreetMap way ID
  name             String?
  surface_type     String    // paved, unpaved, dirt, gravel, etc.
  difficulty       String    // easy, medium, hard, expert
  popularity_score Float     // Score from 0.0 to 1.0 based on usage
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  
  // Geographic data stored as JSONB for flexibility
  // Stores the segment geometry as GeoJSON LineString
  geometry         Json?     // GeoJSON LineString format
  
  // Indexes for geographic and performance queries
  @@index([osm_id])
  @@index([surface_type])
  @@index([difficulty])
  @@index([popularity_score])
  @@map("segments")
}

// Review model for user reviews of routes
model Review {
  id         String   @id @default(cuid())
  userId     String
  routeId    String
  rating     Int      @db.SmallInt // Rating from 1 to 5
  comment    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  route      Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
  
  // Ensure one review per user per route
  @@unique([userId, routeId])
  @@index([routeId])
  @@index([rating])
  @@index([created_at])
  @@map("reviews")
}

// Geographic data structure explanation:
// 
// PostGIS Geography Type (SRID 4326):
// - Uses WGS84 coordinate system (latitude/longitude)
// - Geography type provides accurate distance calculations on Earth's surface
// - LineString stores ordered sequence of coordinate pairs
// - Coordinates are stored as [longitude, latitude] (GeoJSON format)
//
// Example geometry data:
// {
//   "type": "LineString",
//   "coordinates": [
//     [2.3522, 48.8566],  // [longitude, latitude] - Paris
//     [2.2945, 48.8584], // [longitude, latitude] - Eiffel Tower
//     [2.3200, 48.8700]  // [longitude, latitude] - Another point
//   ]
// }
//
// Geographic queries supported:
// - Distance calculations: ST_Distance(geometry1, geometry2)
// - Bounding box queries: ST_Contains(bounding_box, point)
// - Proximity searches: ST_DWithin(geometry, point, distance)
// - Spatial joins: ST_Intersects(geometry1, geometry2)
//
// Performance considerations:
// - Spatial indexes are automatically created on geometry columns
// - Use ST_GeomFromText() for coordinate transformations
// - Consider using ST_Transform() for different coordinate systems


